generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Form          Form[]
  FormResponse  FormResponse[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Main former schemas

model Form {
  id          String         @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  steps       FormStep[]
  fields      FormField[]
  responses   FormResponse[]
}

model FormStep {
  id     String      @id @default(uuid())
  form   Form        @relation(fields: [formId], references: [id])
  formId String
  order  Int // step number; 0/1-based
  title  String
  fields FormField[]
}

model FormField {
  id        String              @id @default(uuid())
  form      Form                @relation(fields: [formId], references: [id])
  formId    String
  step      FormStep?           @relation(fields: [stepId], references: [id])
  stepId    String?
  label     String
  type      FieldType
  options   String[] // For radio/select type, option values
  required  Boolean             @default(false)
  order     Int
  responses FormResponseField[]
}

enum FieldType {
  TEXT
  EMAIL
  RADIO
  // Add more as needed
}

model FormResponse {
  id            String              @id @default(uuid())
  form          Form                @relation(fields: [formId], references: [id])
  formId        String
  createdAt     DateTime            @default(now())
  submittedBy   User?               @relation(fields: [submittedById], references: [id])
  submittedById String? // optionally track who submitted
  fields        FormResponseField[]
}

model FormResponseField {
  id          String       @id @default(uuid())
  response    FormResponse @relation(fields: [responseId], references: [id])
  responseId  String
  formField   FormField    @relation(fields: [formFieldId], references: [id])
  formFieldId String
  value       String // Store as TEXT, parse elsewhere if needed
}
